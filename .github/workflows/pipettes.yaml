name: "Pipettes build/test"
on:
  pull_request:
    paths:
      - "pipettes/**"
      - "common/**"
      - "can/**"
      - "motor-control/**"
      - "spi/**"
      - "include/**"
      - "!include/gantry/**"
      - "!include/head/**"
      - "i2c/**"
      - "cmake/*"
      - "!cmake/Arduino*"
      - "CMakeLists.txt"
      - "pipettes/CMakeLists.txt"
      - "CMakePresets.json"
      - ".clang-format"
      - ".clang-tidy"
  push:
    paths:
      - "pipettes/**"
      - "common/**"
      - "can/**"
      - "i2c/**"
      - "spi/**"
      - "motor-control/**"
      - "include/**"
      - "!include/gantry/**"
      - "!include/head/**"
      - "cmake/*"
      - "!cmake/Arduino*"
      - "CMakeLists.txt"
      - "pipettes/CMakeLists.txt"
      - "CMakePresets.json"
      - ".clang-format"
      - ".clang-tidy"
      - ".github/workflows/pipettes.yaml"
    branches:
      - "*"
    tags:
      - "pipettes@*"
  workflow_dispatch:

env:
  ci: 1

defaults:
  run:
    shell: bash

jobs:
  cross-compile-check:
    name: "Cross-Compile/Check"
    runs-on: "ubuntu-20.04"
    timeout-minutes: 20
    steps:
      - uses: "actions/checkout@v2"
        with:
          fetch-depth: 0
      - uses: "actions/cache@v2"
        with:
          path: "./stm32-tools"
          key: ${{ runner.os }}-${{ hashFiles('**/cmake/*') }}-${{ secrets.CACHE_VERSION }}
      - name: "Configure proto"
        run: cmake --preset=cross-pipettes . -DCMAKE_BUILD_TYPE=RelWithDebInfo
      - name: "Configure current revs"
        run: cmake --preset=cross . -DCMAKE_BUILD_TYPE=RelWithDebInfo
      - name: "Format"
        run: cmake --build --preset=pipettes-a1 --target pipettes-format-ci
      - name: "Build proto"
        run: cmake --build --preset=pipettes-a1 --target pipettes-images pipettes-applications
      - name: "Build current revs"
        run: cmake --build --preset=pipettes --target pipettes-images pipettes-applications
      - name: "Lint"
        run: cmake --build --preset=pipettes --target pipettes-lint

  host-compile-test:
    name: "Host-Compile/Test"
    runs-on: "ubuntu-20.04"
    timeout-minutes: 20
    steps:
      - name: Update and install gcc-10 & g++-10
        run: |
          sudo apt update
          sudo apt install gcc-10 g++-10

      - name: Checkout ot3-firmware repository
        uses: "actions/checkout@v2"
        with:
          fetch-depth: 0
          path: ot3-firmware

      - name: Checkout opentrons repository
        uses: actions/checkout@v3
        with:
          repository: "Opentrons/opentrons"
          path: opentrons

      - name: Cache stm32-tools
        uses: "actions/cache@v2"
        with:
          path: "./stm32-tools"
          key: ${{ runner.os }}-${{ hashFiles('**/cmake/*') }}-${{ secrets.CACHE_VERSION }}

      - name: "Configure"
        run: cmake --preset=host-gcc10 .
        working-directory: ot3-firmware

      - name: 'Build and test'
        run: cmake --build ./build-host --target pipettes-build-and-test
        working-directory: ot3-firmware

      - name: 'Setup state_manager'
        run: cmake --build ./build-host/ --target state-manager-setup
        working-directory: ot3-firmware

      - name: 'Build single simulator'
        run: cmake --build ./build-host --target pipettes-single-simulator
        working-directory: ot3-firmware

      - name: 'Build multi simulator'
        run: cmake --build ./build-host --target pipettes-multi-simulator
        working-directory: ot3-firmware

      - name: 'Build 96 simulator'
        run: cmake --build ./build-host --target pipettes-96-simulator
        working-directory: ot3-firmware

      - name: 'Build 384 simulator'
        run: cmake --build ./build-host --target pipettes-384-simulator
        working-directory: ot3-firmware

      - name: "Upload artifacts"
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: "pipettes-simulators-${{github.ref_name}}"
          path: |
            build-host/pipettes/simulator/pipettes-*-simulator
