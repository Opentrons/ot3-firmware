name: "Can build/test"
on:
  pull_request:
    paths:
      - "can/**"
      - "include/can/**"
      - "cmake/*"
      - "CMakeLists.txt"
      - "CMakePresets.json"
      - ".clang-format"
      - ".clang-tidy"
    paths_ignore:
      - "cmake/Arduino*"
  push:
    paths:
      - "can/**"
      - "include/can/**"
      - "include/common/**"
      - "cmake/*"
      - "CMakeLists.txt"
      - "CMakePresets.json"
      - ".clang-format"
      - ".clang-tidy"
      - ".github/workflows/can.yaml"
    paths_ignore:
      - "cmake/Arduino*"
    branches:
      - "*"
    tags:
      - "can@*"
  workflow_dispatch:

env:
  ci: 1

defaults:
  run:
    shell: bash

jobs:
  cross-compile-check:
    name: "Cross-Compile/Check"
    runs-on: "ubuntu-20.04"
    timeout-minutes: 10
    steps:
      - uses: "actions/checkout@v2"
        with:
          fetch-depth: 0
      - uses: "actions/cache@v2"
        with:
          path: "./stm32-tools"
          key: ${{ runner.os }}-${{ hashFiles('**/cmake/*') }}-${{ secrets.CACHE_VERSION }}
      - name: "Configure"
        run: cmake --preset=cross . -DCMAKE_BUILD_TYPE=debug
      - name: "Format"
        run: cmake --build ./build-cross --target can-format-ci
      - name: "Build"
        run: cmake --build ./build-cross --target can
  host-compile-test:
    name: "Host-Compile/Test"
    runs-on: "ubuntu-20.04"
    timeout-minutes: 10
    steps:
      - run: |
          sudo apt update
          sudo apt install gcc-10 g++-10
      - uses: "actions/checkout@v2"
        with:
          fetch-depth: 0
      - uses: "actions/cache@v2"
        with:
          path: "./stm32-tools"
          key: ${{ runner.os }}-${{ hashFiles('**/cmake/*') }}-${{ secrets.CACHE_VERSION }}
      - name: "Configure"
        run: cmake --preset=host-gcc10 .
      - name: 'Build and test'
        run: cmake --build ./build-host --target can-build-and-test
